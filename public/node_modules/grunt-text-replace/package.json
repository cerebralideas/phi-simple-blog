{
  "name": "grunt-text-replace",
  "description": "General purpose text replacement for grunt. Allows you to replace text in files using strings, regexs or functions.",
  "version": "0.2.6",
  "author": {
    "name": "Jonathan Holmes"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yoniholmes/grunt-text-replace.git"
  },
  "bugs": {
    "url": "https://github.com/yoniholmes/grunt-text-replace/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-text-replace": "bin/grunt-text-replace"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test --force"
  },
  "devDependencies": {
    "grunt": "~0.3.17"
  },
  "keywords": [
    "gruntplugin",
    "replace",
    "text",
    "string",
    "regex",
    "function"
  ],
  "readme": "# grunt-text-replace [!['Build status'][travis_image_url]][travis_page_url]\n\n  [travis_image_url]: https://api.travis-ci.org/yoniholmes/grunt-text-replace.png\n  [travis_page_url]: https://travis-ci.org/yoniholmes/grunt-text-replace\n\n\n\nGeneral purpose text replacement for grunt. \n\nAllows you to replace text in files using strings, regexs or functions.\n \n\n## Installation\nIn your project's [gruntfile][getting_started] directory, run: \n\n```bash\nnpm install grunt-text-replace\n```\n\nThen add this line to your project's [gruntfile][getting_started]:\n\n```javascript\ngrunt.loadNpmTasks('grunt-text-replace');\n```\n\n  [grunt]: http://gruntjs.com/\n  [getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\n\n\n## Usage\n\n\n```javascript\nreplace: {\n  example: {\n    src: ['text/*.txt'],             // source files array (supports minimatch)\n    dest: 'build/text/',             // destination directory or file\n    replacements: [{ \n      from: 'Red',                   // string replacement\n      to: 'Blue' \n    }, { \n      from: /(f|F)(o{2,100})/g,      // regex replacement ('Fooo' to 'Mooo')\n      to: 'M$2' \n    }, {\n      from: 'Foo',\n      to: function (matchedWord) {   // callback replacement\n        return matchedWord + ' Bar';\n      }\n    }]\n  }\n}\n```\n\nHere's another example using [grunt.template][grunt.template], and overwriting \noriginal source files:\n\n```javascript\nreplace: {\n  another_example: {\n    src: ['build/*.html'],\n    overwrite: true,                 // overwrite matched source files\n    replacements: [{ \n      from: /[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{2,4}/g,\n      to: \"<%= grunt.template.today('dd/mm/yyyy') %>\"\n    }]\n  }\n}\n```\n\n\n\n## API reference\n\n\n### replace \n\n*replace* is the top level task that goes in your `grunt.initConfig({})`. It is\na [multi-task][multitask], meaning that it must contain targets, which you can \nname anything you like.\n\n[multitask]: https://github.com/gruntjs/grunt/blob/master/docs/api.md#gruntregistermultitask\n\n\n### src\n\n*src* is an array of source files to be replaced, and is required. \nIt supports [minimatch][minimatch] paths.\n\n[minimatch]: https://github.com/isaacs/minimatch\n\n\n### dest\n\n*dest* is the destination for files to be replaced, and can refer to either a:\n\n- file: `'path/output.txt'`\n- directory: `'path/'`\n\ngrunt-text-replace will throw an error if multiple source files are mapped to\na single file. \n\n\n\n### overwrite\n\n*overwrite* is used if all you need to do is overwrite existing files. \nTo use it, omit *dest*, otherwise \ngrunt-text-replace will throw an error. You can only use one or the other. \n\n\n### replacements\n\n*replacements* is an array of *from* and *to* replacements. See the \n[examples](#usage) above.\n\n\n### from\n\n*from* is the old text that you'd like replace. It can be a:\n\n- plain string: `'Red'` *matches all instances of 'Red' in file*\n- regular expression object:  `/Red/g` *same as above*\n\n\n### to\n\n*to* is the replacement. It can be a:\n\n- plain string\n- string containing a [grunt.template][grunt.template]\n- string containing regex variables `$1`, `$2`, etc\n- combination of the above\n- function where the return value will be used as the replacement text (supports \n[grunt.template][grunt.template])\n\n#### function\nWhere *to* is a function, the function receives 4 parameters:\n\n1. **matchedWord**:  the matched word\n2. **index**:  an integer representing point where word was found in a text\n3. **fullText**:  the full original text\n4. **regexMatches**:  an array containing all regex matches, empty if none defined or found.\n\n\n```javascript\n// Where the original source file text is:  \"Hello world\"\n\nreplacements: [{ \n  from: /wor(ld)/g, \n  to: function (matchedWord, index, fullText, regexMatches) {\n    // matchedWord:  \"world\"\n    // index:  6  \n    // fullText:  \"Hello world\"\n    // regexMatches:  [\"ld\"]\n    return 'planet';   //\n  }\n}]\n\n// The new text will now be:  \"Hello planet\"\n```\n\n\n[grunt.template]: https://github.com/gruntjs/grunt/blob/master/docs/api_template.md\n\n\n## Release History\n- v0.2.5 - 2012/11/23.  Function replacements now support grunt.template.\n- v0.2.0 - 2012/11/21.  Added tests, refactored internals, strings now replace globally within a file, updated documentation.\n- v0.1.0 - 2012/11/12.  Initial release.\n\nPatch releases will generally remain undocumented in this release history. \nI'll do so if there's enough reason for it, such as a functionality tweak, or \nsignificant bug fix. For more detail see the source.\n\n\n\n## License\nCopyright (c) 2012 Jonathan Holmes  \nLicensed under the MIT license.",
  "_id": "grunt-text-replace@0.2.6",
  "dist": {
    "shasum": "a978b3bc90b59d35903b97c36633eba2badff027"
  },
  "_from": "grunt-text-replace"
}
